function [spec_analysis,valid,fullvalid,pkf_data] = analyse_spectra(dataset,state,subject,index)
	% Retrieve analysis for experimental data
	%
	% spec_analysis = analyse_spectra(dataset,state,subject,index)
	% 
	% dataset - can be a set, or a cell array of sets e.g. {'control_apnea','control_opioid'}
	% p_view - pause and view the spectra during execution
	% index - consider the list of all files that is generated by the prefix. index corresponds to entries in this list
	% Rev 820 has the original version WITH PLOTTING CODE
	
	if nargin < 4 || isempty(index)
		index = [];
	end

	if nargin < 3 || isempty(subject)
		subject = [];
	end

	if nargin < 2 || isempty(state)
		state = [];
	end

	if nargin < 1 || isempty(dataset)
		dataset = [];
	end

	eegdb = data.eeg_database();
	files = eegdb.get(dataset,state,subject);
	eegdb.close();

	if ~isempty(index)
		files = files(index);
	end
	
	% Decide which spectral criterion to use. This comes from validate_spectrum.m
	states = {'EC','EO','W','R','S1','S2','S3','S4','N1','N2','N3'};
	tasks = [1 2 1 2 2 3 5 5 2 3 5];
	if isempty(state)
		task = 0;
	elseif iscell(state)
		task = tasks(strcmp(states,state{1}));
	else
		task = tasks(strcmp(states,state));
	end

	
	parfor j = 1:length(files)
		s = load(files{j});
        spec_analysis(j) = model.get_spec_analysis(s.f,s.P);
	end

	attribs = [fields(spec_analysis(1))];
	for x = 1:length(attribs)
		a.(attribs{x}) = romesh_utils.readstruct(spec_analysis,attribs{x})';
	end
	clear spec_analysis
	spec_analysis = a;
	%spec_analysis.valid = valid;
	clear a
	
	%fprintf(1,'Passed: %i of %i\n',sum(valid==0),length(files));
end

